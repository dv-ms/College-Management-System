{"ast":null,"code":"var _jsxFileName = \"/home/beryl/Desktop/Training/Training/Rails/college/app/javascript/bundles/HelloWorld/components/HelloWorld.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar HelloWorld =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HelloWorld, _React$Component);\n\n  /**\n   * @param props - Comes from your rails view.\n   */\n  //first after initialize\n  function HelloWorld(props) {\n    var _this;\n\n    _classCallCheck(this, HelloWorld);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HelloWorld).call(this, props));\n\n    _this.updateName = function (new_name) {\n      console.log(\"Hello world component updating name\");\n\n      _this.setState({\n        name: new_name\n      });\n\n      console.log(\"Hello world component updated name\");\n    };\n\n    _this.state = {\n      name: _this.props.name\n    };\n    console.log(\"constructor()\");\n    return _this;\n  } //before render() and after update\n\n\n  _createClass(HelloWorld, [{\n    key: \"render\",\n    //afret getDerivedStateFromProps() in mounting at 3rd\n    value: function render() {\n      var _this2 = this;\n\n      console.log(\"render()\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Hello, \", this.state.name, \"!\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Say hello to:\"), React.createElement(\"input\", {\n        id: \"name\",\n        type: \"text\",\n        value: this.state.name,\n        onChange: function onChange(e) {\n          return _this2.updateName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })));\n    } //called after render() in mounting\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"componentDidMount()\");\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      console.log(\"shouldComponentUpdate()\");\n      console.log(true);\n      return true;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      console.log(\"getSnapshotBeforeUpdate()\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(\"getSnapshotBeforeUpdate()\");\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"componentWillUnmount()\");\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      //return {favoritecolor: props.favcol };\n      console.log(\"getDerivedStateFromProps()\");\n    }\n  }]);\n\n  return HelloWorld;\n}(React.Component);\n\nHelloWorld.propTypes = {\n  name: PropTypes.string.isRequired // this is passed from the Rails view\n\n};\nexport { HelloWorld as default };","map":{"version":3,"sources":["/home/beryl/Desktop/Training/Training/Rails/college/app/javascript/bundles/HelloWorld/components/HelloWorld.jsx"],"names":["PropTypes","React","HelloWorld","props","updateName","new_name","console","log","setState","name","state","e","target","value","prevProps","prevState","Component","propTypes","string","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,U;;;;;AAKnB;;;AAIC;AACD,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;;AADiB,UAuDnBC,UAvDmB,GAuDN,UAACC,QAAD,EAAc;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;;AACA,YAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAEJ;AAAR,OAAd;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,KA3DkB;;AAEjB,UAAKG,KAAL,GAAa;AAAED,MAAAA,IAAI,EAAE,MAAKN,KAAL,CAAWM;AAAnB,KAAb;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAHiB;AAIlB,G,CAED;;;;;AAMA;6BACS;AAAA;;AACPD,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU,KAAKG,KAAL,CAAWD,IADrB,MADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAIE;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,IAHpB;AAIE,QAAA,QAAQ,EAAE,kBAACE,CAAD;AAAA,iBAAO,MAAI,CAACP,UAAL,CAAgBO,CAAC,CAACC,MAAF,CAASC,KAAzB,CAAP;AAAA,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CALF,CADF;AAmBD,K,CAED;;;;wCACmB;AACjBP,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;;4CAEsB;AACrBD,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,aAAO,IAAP;AACD;;;4CAEuBO,S,EAAWC,S,EAAU;AAC3CT,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;;yCAEmB;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;;2CAQqB;AACpBD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;;;6CAxD+BJ,K,EAAOO,K,EAAO;AAC5C;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;;;EApBqCN,KAAK,CAACe,S;;AAAzBd,U,CACZe,S,GAAY;AACjBR,EAAAA,IAAI,EAAET,SAAS,CAACkB,MAAV,CAAiBC,UADN,CACkB;;AADlB,C;SADAjB,U","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class HelloWorld extends React.Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired, // this is passed from the Rails view\n  };\n\n  /**\n   * @param props - Comes from your rails view.\n   */\n\n   //first after initialize\n  constructor(props) {\n    super(props);\n    this.state = { name: this.props.name };\n    console.log(\"constructor()\");\n  }\n\n  //before render() and after update\n  static getDerivedStateFromProps(props, state) {\n    //return {favoritecolor: props.favcol };\n    console.log(\"getDerivedStateFromProps()\");\n  }\n\n  //afret getDerivedStateFromProps() in mounting at 3rd\n  render() {\n    console.log(\"render()\");\n    return (\n      <div>\n        <h3>\n          Hello, {this.state.name}!\n        </h3>\n        <hr />\n        <form >\n          <label htmlFor=\"name\">\n            Say hello to:\n          </label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={(e) => this.updateName(e.target.value)}\n          />\n        </form>\n      </div>\n    );\n  }\n\n  //called after render() in mounting\n  componentDidMount(){\n    console.log(\"componentDidMount()\");\n  }\n\n  shouldComponentUpdate(){\n    console.log(\"shouldComponentUpdate()\");\n    console.log(true);\n    return true;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState){\n    console.log(\"getSnapshotBeforeUpdate()\");\n  }\n\n  componentDidUpdate(){\n    console.log(\"getSnapshotBeforeUpdate()\");\n  }\n\n  updateName = (new_name) => {\n    console.log(\"Hello world component updating name\");\n    this.setState({ name: new_name });\n    console.log(\"Hello world component updated name\");\n  };\n\n  componentWillUnmount(){\n    console.log(\"componentWillUnmount()\");    \n  }\n}\n"]},"metadata":{},"sourceType":"module"}